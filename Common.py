# -*- coding: utf-8 -*-
# @Time    : 2020-06-24 22:16
# @Author  : liudongyang
# @FileName: Common.py
# @Software: PyCharm
# 公共方法
import random
import time
import redis
from redis_data import RedisConnect
pool = RedisConnect()
from faker import Faker
fake = Faker(locale='zh_CN')

class CommonFunction:
    def __init__(self):
        self.rel_sctp = '2'
        self.year = time.strftime("%Y", time.localtime())
        self.month = time.strftime("%m", time.localtime())
        self.day = time.strftime("%d", time.localtime())

    def random_str(self, num):
        words = 'abcdefghijklmnopqrstuvwxyz'
        strs = ''.join(random.choices(words, k=num))
        return strs.capitalize()

    def person_fir_name(self):  # 个人客户first name
        name = self.random_str(random.randint(3,7))
        return name

    def make_CTSX_data(self):
        return random.choice([
            "1",  # 男
            "2",  # 女
            "ZZ",  # 未知
        ])

    # 生成姓名数据
    def make_name_data(self, longth=None):
        first_name = random.choice([
            "赵", "钱", "孙", "李", "周", "吴", "郑", "王", "冯", "陈", "褚", "卫", "蒋", "沈", "韩", "杨", "朱", "秦", "尤", "许", "何",
            "吕",
            "施", "张", "孔", "曹", "严", "华", "金", "魏", "陶", "姜", "戚", "谢", "邹", "喻", "柏", "水", "窦", "章", "云", "苏", "潘",
            "葛",
            "奚", "范", "彭", "郎", "鲁", "韦", "昌", "马", "苗", "凤", "花", "方", "俞", "任", "袁", "柳", "酆", "鲍", "史", "唐", "费",
            "廉",
            "岑", "薛", "雷", "贺", "倪", "汤", "滕", "殷", "罗", "毕", "郝", "邬", "安", "常", "乐", "于", "时", "傅", "皮", "卞", "齐",
            "康",
            "伍", "余", "元", "卜", "顾", "孟", "平", "黄", "和", "穆", "萧", "尹", "姚", "邵", "湛", "汪", "祁", "毛", "禹", "狄", "米",
            "贝",
            "明", "臧", "计", "伏", "成", "戴", "谈", "宋", "茅", "庞", "熊", "纪", "舒", "屈", "项", "祝", "董", "粱", "杜", "阮", "蓝",
            "闵",
            "席", "季", "麻", "强", "贾", "路", "娄", "危", "江", "童", "颜", "郭", "梅", "盛", "林", "刁", "钟", "徐", "邱", "骆", "高",
            "夏",
            "蔡", "田", "樊", "胡", "凌", "霍", "虞", "万", "支", "柯", "昝", "管", "卢", "莫", "经", "房", "裘", "缪", "干", "解", "应",
            "宗",
            "丁", "宣", "贲", "邓", "郁", "单", "杭", "洪", "包", "诸", "左", "石", "崔", "吉", "钮", "龚", "程", "嵇", "邢", "滑", "裴",
            "陆",
            "荣", "翁", "荀", "羊", "於", "惠", "甄", "麴", "家", "封", "芮", "羿", "储", "靳", "汲", "邴", "糜", "松", "井", "段", "富",
            "巫",
            "乌", "焦", "巴", "弓", "牧", "隗", "山", "谷", "车", "侯", "宓", "蓬", "全", "郗", "班", "仰", "秋", "仲", "伊", "宫", "宁",
            "仇",
            "栾", "暴", "甘", "钭", "厉", "戎", "祖", "武", "符", "刘", "景", "詹", "束", "龙", "叶", "幸", "司", "韶", "郜", "黎", "蓟",
            "薄",
            "印", "宿", "白", "怀", "蒲", "邰", "从", "鄂", "索", "咸", "籍", "赖", "卓", "蔺", "屠", "蒙", "池", "乔", "阴", "欎", "胥",
            "能",
            "苍", "双", "闻", "莘", "党", "翟", "谭", "贡", "劳", "逄", "姬", "申", "扶", "堵", "冉", "宰", "郦", "雍", "舄", "璩", "桑",
            "桂",
            "濮", "牛", "寿", "通", "边", "扈", "燕", "冀", "郏", "浦", "尚", "农", "温", "别", "庄", "晏", "柴", "瞿", "阎", "充", "慕",
            "连",
            "茹", "习", "宦", "艾", "鱼", "容", "向", "古", "易", "慎", "戈", "廖", "庾", "终", "暨", "居", "衡", "步", "都", "耿", "满",
            "弘",
            "匡", "国", "文", "寇", "广", "禄", "阙", "东", "殴", "殳", "沃", "利", "蔚", "越", "夔", "隆", "师", "巩", "厍", "聂", "晁",
            "勾",
            "敖", "融", "冷", "訾", "辛", "阚", "那", "简", "饶", "空", "曾", "毋", "沙", "乜", "养", "鞠", "须", "丰", "巢", "关", "蒯",
            "相",
            "查", "後", "荆", "红", "游", "竺", "权", "逯", "盖", "益", "桓", "公", "万俟", "司马", "上官", "欧阳", "夏侯", "诸葛", "闻人", "东方",
            "赫连", "皇甫", "尉迟", "公羊", "澹台", "公冶", "宗政", "濮阳", "淳于", "单于", "太叔", "申屠", "公孙", "仲孙", "轩辕", "令狐", "钟离", "宇文",
            "长孙", "慕容", "鲜于", "闾丘", "司徒", "司空", "亓官", "司寇", "仉", "督", "子车", "颛孙", "端木", "巫马", "公西", "漆雕", "乐正", "壤驷",
            "公良",
            "拓跋", "夹谷", "宰父", "谷梁", "晋", "楚", "闫", "法", "汝", "鄢", "涂", "钦", "段干", "百里", "东郭", "南门", "呼延", "归", "海",
            "羊舌",
            "微生", "岳", "帅", "缑", "亢", "况", "后", "有", "琴", "梁丘", "左丘", "东门", "西门", "商", "牟", "佘", "佴", "伯", "赏", "南宫",
            "墨",
            "哈", "谯", "笪", "年", "爱", "阳", "佟", "第五", "言", "福", "卓", "蔺", "屠", "蒙", "池", "乔", "阳", "郁", "胥", "能", "苍",
            "双",
            "闻", "莘", "党", "翟", "谭", "贡", "劳", "逄", "姬", "申", "扶", "堵", "冉", "宰", "郦", "雍", "却", "璩", "桑", "桂", "濮",
            "牛",
            "寿", "通", "边", "扈", "燕", "冀", "僪", "浦", "尚", "农", "温", "别", "庄", "晏", "柴", "瞿", "阎", "充", "慕", "连", "茹",
            "习",
            "宦", "艾", "鱼", "容", "向", "古", "易", "慎", "戈", "庾", "终", "暨", "居", "衡", "步都", "耿", "满", "弘", "匡", "国", "文",
            "寇",
            "广", "禄", "阙", "东欧", "殳", "沃", "利", "蔚", "越", "夔", "隆", "师", "巩", "厍", "聂晁", "勾", "敖", "融", "冷", "訾", "辛",
            "阚",
            "那", "简", "饶", "空曾", "毋", "沙", "乜", "养", "鞠", "须", "丰", "巢", "关", "蒯", "相查", "后", "荆", "红", "游", "竺", "权",
            "逮",
            "盍", "益", "桓", "公", "唱"])
        second_name = random.choice([
            "一", "是", "我", "不", "在", "人", "们", "有", "来", "他", "这", "上", "着", "个", "地", "到",
            "大", "里", "说", "去", "子", "得", "也", "和", "那", "要", "下", "看", "天", "时", "过", "出",
            "小", "么", "起", "你", "都", "把", "好", "还", "多", "没", "为", "又", "可", "家", "学", "只",
            "以", "主", "会", "样", "年", "想", "能", "生", "同", "老", "中", "从", "自", "面", "前", "头",
            "到", "它", "后", "然", "走", "很", "像", "见", "两", "用", "国", "动", "进", "成", "回", "什",
            "边", "作", "对", "开", "而", "已", "些", "现", "山", "民", "候", "经", "发", "工", "向", "事",
            "命", "给", "长", "水", "义", "三", "声", "于", "高", "正", "手", "知", "理", "眼", "志", "点",
            "心", "战", "二", "问", "但", "身", "方", "实", "做", "叫", "当", "住", "听", "革", "打", "呢",
            "真", "党", "全", "才", "四", "已", "所", "敌", "之", "最", "光", "产", "情", "路", "分", "总",
            "条", "白", "话", "东", "席", "次", "亲", "如", "被", "花", "口", "放", "儿", "常", "西", "气",
            "五", "第", "使", "写", "军", "吧", "文", "运", "在", "果", "怎", "定", "许", "快", "明", "行",
            "因", "别", "飞", "外", "树", "物", "活", "部", "门", "无", "往", "船", "望", "新", "带", "队",
            "先", "力", "完", "间", "却", "站", "代", "员", "机", "更", "九", "每", "风", "级", "跟", "笑",
            "啊", "孩", "万", "少", "直", "意", "夜", "比", "阶", "连", "车", "重", "便", "斗", "马", "哪",
            "化", "太", "指", "变", "社", "似", "士", "者", "干", "石", "满", "决", "百", "原", "群",
            "究", "各", "六", "本", "思", "解", "立", "河", "爸", "村", "八", "难", "早", "论", "根",
            "共", "让", "相", "研", "今", "其", "书", "接", "应", "关", "信", "觉", "步", "反", "处",
            "记", "将", "千", "找", "争", "领", "或", "师", "结", "块", "跑", "谁", "草", "越", "字", "加",
            "紧", "爱", "等", "习", "阵", "月", "青", "半", "火", "法", "题", "建", "赶", "位",
            "唱", "海", "七", "任", "件", "感", "准", "张", "团", "屋", "离", "片", "科", "倒", "睛", "利",
            "世", "刚", "且", "由", "送", "切", "星", "晚", "表", "够", "整", "认", "响", "雪", "流", "未",
            "场", "该", "并", "底", "深", "刻", "平", "伟", "忙", "提", "确", "近", "亮", "轻", "讲", "农",
            "古", "黑", "告", "界", "拉", "名", "呀", "土", "清", "阳", "照", "办", "史", "改", "历", "转",
            "画", "造", "嘴", "此", "治", "北", "必", "服", "雨", "穿", "内", "识", "验", "传", "业", "菜", "兴"])
        last_name = random.choice([
            "命", "给", "长", "水", "义", "三", "声", "于", "高", "正", "手", "知", "理", "眼", "志", "点",
            "心", "战", "二", "问", "但", "身", "方", "实", "做", "叫", "当", "住", "听", "革", "打", "呢",
            "真", "党", "全", "才", "四", "已", "所", "敌", "之", "最", "光", "产", "情", "路", "分", "总",
            "条", "白", "话", "东", "席", "次", "亲", "如", "被", "花", "口", "放", "儿", "常", "西", "气",
            "五", "第", "使", "写", "军", "吧", "文", "运", "在", "果", "怎", "定", "许", "快", "明", "行",
            "因", "别", "飞", "外", "树", "物", "活", "部", "门", "无", "往", "船", "望", "新", "带", "队",
            "先", "力", "完", "间", "却", "站", "代", "员", "机", "更", "九", "每", "风", "级", "跟", "笑",
            "啊", "孩", "万", "少", "直", "意", "夜", "比", "阶", "连", "车", "重", "便", "斗", "马", "哪",
            "化", "太", "指", "变", "社", "似", "士", "者", "干", "石", "满", "决", "百", "原", "群",
            "究", "各", "六", "本", "思", "解", "立", "河", "爸", "村", "八", "难", "早", "论", "根",
            "共", "让", "相", "研", "今", "其", "书", "接", "应", "关", "信", "觉", "步", "反", "处",
            "记", "将", "千", "找", "争", "领", "或", "师", "结", "块", "跑", "谁", "草", "越", "字"])
        fouth_name = random.choice([
            "命", "给", "长", "水", "义", "三", "声", "于", "高", "正", "手", "知", "理", "眼", "志", "点",
            "心", "战", "二", "问", "但", "身", "方", "实", "做", "叫", "当", "住", "听", "革", "打", "呢",
            "真", "党", "全", "才", "四", "已", "所", "敌", "之", "最", "光", "产", "情", "路", "分", "总",
            "条", "白", "话", "东", "席", "次", "亲", "如", "被", "花", "口", "放", "儿", "常", "西", "气",
            "五", "第", "使", "写", "军", "吧", "文", "运", "在", "果", "怎", "定", "许", "快", "明", "行",
            "因", "别", "飞", "外", "树", "物", "活", "部", "门", "无", "往", "船", "望", "新", "带", "队",
            "先", "力", "完", "间", "却", "站", "代", "员", "机", "更", "九", "每", "风", "级", "跟", "笑",
            "啊", "孩", "万", "少", "直", "意", "夜", "比", "阶", "连", "车", "重", "便", "斗", "马", "哪",
            "五", "第", "使", "写", "军", "吧", "文", "运", "在", "果", "怎", "定", "许", "快", "明", "行",
            "因", "别", "飞", "外", "树", "物", "活", "部", "门", "无", "往", "船", "望", "新", "带", "队",
            "先", "力", "完", "间", "却", "站", "代", "员", "机", "更", "九", "每", "风", "级", "跟", "笑",
            "啊", "孩", "万", "少", "直", "意", "夜", "比", "阶", "连", "车", "重", "便", "斗", "马", "哪",
            "化", "太", "指", "变", "社", "似", "士", "者", "干", "石", "满", "决", "百", "原", "群",
            "究", "各", "六", "本", "思", "解", "立", "河", "爸", "村", "八", "难", "早", "论", "根",
            "共", "让", "相", "研", "今", "其", "书", "接", "应", "关", "信", "觉", "步", "反", "处",
        ])
        if longth == 4:
            return first_name + second_name + last_name + fouth_name
        else:
            return first_name + second_name + last_name

    def org_name(self):  # 机构客户名称
        name = [self.random_str(random.randint(4,7)) for i in range(random.randint(3,5))]
        return ' '.join(name)

    def relation_type(self):
        """
        关系人类型，个人关系、机构关系，其他
        :return:
        """
        cust_type = ''
        if cust_type == 1:
            relation_type = random.choice([
                "B01",  # 夫妻关系
                "B02",  # 子女
                "B03",  # 父母
                "B04",  # 其他血亲
                "B05",  # 其他姻亲
                "B06",  # 同学
                "B07" ] # 朋友
            )
        elif cust_type == 2:
            relation_type = random.choice([
                "A01",  # 对公客户与法人代表
                "A02",  # 对公客户与联系人
                "A03",  # 对公客户与负责人
                "A04",  # 对公客户与董事
                "A05",  # 对公客户与股东
                "A06",  # 母公司与子公司
                "A07",  # 代理
                "A08",  # 投资与被投资
                "A09",  # 其他关联单位
                "A10",  # 企业团体
                "A11",  # 银行团体
                "A12" ] # 家族企业
            )
        else:
            relation_type = random.choice(
                  ["X",  # 未说明
                "C01"]  # 受益所有人
            )

        return relation_type


    def rel_layer(self):
        layer = random.randint(0,5)
        return layer

    def cert_type(self, rel_sctp):  # 证件类型
        if rel_sctp == '1':
            cstp = random.choice([
            "11",  # 居民身份证或临时身份证
            "12",  # 军人或武警身份证件
            "13",  # 港澳台通行证
            "14",  # 外国公民护照
            "19"]  # 其他个人有效证件(需进一步说明)
        )
        else:
            cstp = random.choice([
                "21",  # 组织机构代码
                "29"]  # 其他机构代码(需进一步说明)
            )
        return cstp

    def make_ABIT_data(self):
        return random.choice([
            "1",  # 身份证
            "2",  # 临时身份证
            "3",  # 户口簿
            "4",  # 护照
            "5",  # 警官证
            "6",  # 军官证
            "7",  # 士兵证
            "8",  # 文职人员证
            "9",  # 工作证
            "10",  # 港澳通行证
            "11",  # 回港证
            "12",  # 港澳居民来往内地通行证
            "13",  # 台湾居民来往大陆通行证
            "14",  # 香港身份证
            "15",  # 澳门身份证
            "16",  # 台湾身份证
            "17",  # 外国人居留证
            "18",  # 外国护照
            "ZZ",  # 其他
            "A",  # 营业执照
            "B",  # 国税登记证
            "C",  # 地税登记证
            "D",  # 开户许可证
            "E",  # 组织机构代码证
            "F",  # 统一社会信用代码
            "G",  # 登记证书
            "H",  # 事业单位编号
            "I",  # 金融许可证编号
            "J",  # 技术监督局代码
            "K",  # 行政机关
            "L",  # 社会团体
            "M",  # 军队
            "N",  # 武警
            "O",  # 下属机构
            "P",  # 基金会
            "ZZ"  # 其它机构
        ])

    def make_RSCD_data(self):
        return random.choice([
            "0",  # 软通
            "1",  # 软通
            "2",  # 家族
            "3",  # 小微
        ])
    def make_CTVC_data(self):
        """行业"""
        return random.choice([
            "1",  # 基础设施
            "2",  # 房地产业
            "3",  # 证券
            "4",  # 金融业
            "5",  # 工商企业
            "6",  # 卫生、社会保障和社会福利业
            "7",  # 教育
            "8",  # 公共管理和社会组织
            "9",  # 国际组织
            "10",  # 农、林、牧、渔业
            "11",  # 采掘业
            "12",  # 制造业
            "13",  # 电力、燃气及水的生产和供应业
            "14",  # 建筑业
            "15",  # 交通运输、仓储和邮政业
            "16",  # 信息传输、计算机服务和软件业
            "17",  # 批发和零售业
            "18",  # 住宿和餐饮业
            "19",  # 租赁和商务服务业
            "20",  # 科学研究、技术服务业和地质勘察业
            "21",  # 水利、环境和公共设施管理业
            "22",  # 居民服务和其他服务业
            "23",  # 文化、体育和娱乐业
            "24",  # 典当业
            "25",  # 拍卖业
            "26",  # 艺术品投资业
            "27",  # 旅游业
            "28",  # 废品收购业
            "29",  # 彩票销售业
            "ZZ"  # 其他
        ])

    def make_CTVC_data2(self):
        """职业"""
        return random.choice([
            "1",  # 国家机关、党群组织、事业单位负责人
            "2",  # 教科文专业人员
            "3",  # 金融
            "4",  # 商贸
            "5",  # 房地产
            "11",  # 公务员、办事人员
            "14",  # 军人
            "16",  # 生产、制造、运输设备专业人员
            "18",  # 农、林、牧、渔、水利业生产人员
            "19",  # 家庭主妇
            "20",  # 离退休人员
            "21",  # 服务业人员
            "22",  # 私营、个体业主
            "23",  # 企业负责人
            "24",  # 自由职业
            "95",  # 办事人员和有关人员
            "96",  # 专业技术人员
            "97",  # 未知
            "ZZ"  # 其它
        ])

    def person_cert_num(self):  # 个人证件号码
        ctid = self.random_num(18)

        return ctid

    def org_cert_num(self,num=9):  # 机构证件号码 默认9位数字字母组合
        strs = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
        nums = "0123456789"
        n = random.randint(3,6)
        cert = ''.join(random.choices(strs,k=n)) + ''.join(random.choices(nums, k=(num-n)))
        return cert

    def make_date(self, beg=-3, end=20, length=8):
        """制造 日期相关数据，可随机生成往前、往后的日期数据，默认日期格式yyyymmdd，可通过length设置格式，
        length=10, yyyy-mm-dd,
        """
        # 年
        make_year = int(self.year) + random.randint(beg, end)
        # 月
        make_month = int(self.month) + random.randint(0,11)
        if make_month > 12:
            make_month = make_month % 12

        # 日
        make_day = int(self.day) + random.randint(-5, 10)
        if make_day < 0:
            make_day = -make_day
        elif make_day == 0:
            make_day = 1
        else:
            if make_month == 2 and make_day > 28:
                make_day = make_day % 28
            elif make_month in (4,6,9,11) and make_day >30:
                make_day = make_day % 30
            elif make_day > 31:
                make_day = make_day % 31

        # 转为字符串
        make_year = str(make_year)

        if make_month < 10:
            make_month = '0' + str(make_month)
        else:
            make_month = str(make_month)

        if make_day < 10:
            make_day = '0' + str(make_day)
        else:
            make_day = str(make_day)
        if length == 10:
            return "-".join([make_year, make_month, make_day])
        else:
            return make_year + make_month + make_day


    # 国籍
    def chiose_country(self):
        countrys = random.choice(["CHN", "ALB", "DZA", "AFG", "ARG", "ARE", "ABW", "OMN", "AZE", "EGY", "ETH", "IRL", "EST", "AND", "AGO", "AIA", "ATG", "AUT", "ALA", "AUS", "MAC", "BRB", "PNG", "BHS", "PAK", "PRY", "PSE", "BHR", "PAN", "BRA", "BLR", "BMU", "BGR", "MNP", "BEN", "BEL", "ISL", "PRI", "BIH", "POL", "BOL", "BLZ", "BWA", "BTN", "BFA", "BDI", "BVT", "PRK", "GNQ", "DNK", "DEU", "TLS", "TGO", "DOM", "DMA", "RUS", "ECU", "ERI", "FRA", "FRO", "PYF", "GUF", "ATF", "MAF", "VAT", "PHL", "FJI", "FIN", "CPV", "GMB", "COG", "COD", "COL", "CRI", "GRD", "GRL", "GEO", "GGY", "CUB", "GLP", "GUM", "GUY", "KAZ", "HTI", "KOR", "NLD", "BES", "SXM", "HMD", "MNE", "HND", "KIR", "DJI", "KGZ", "GIN", "GNB", "CAN", "GHA", "GAB", "KHM", "CZE", "ZWE", "CMR", "QAT", "CYM", "CCK", "COM", "CIV", "KWT", "HRV", "KEN", "COK", "CUW", "LVA", "LSO", "LAO", "LBN", "LTU", "LBR", "LBY", "LIE", "REU", "LUX", "RWA", "ROU", "MDG", "IMN", "MDV", "FLK", "MLT", "MWI", "MYS", "MLI", "MKD", "MHL", "MTQ", "MYT", "MUS", "MRT", "USA", "UMI", "ASM", "VIR", "MNG", "MSR", "BGD", "PER", "FSM", "MMR", "MDA", "MAR", "MCO", "MOZ", "MEX", "NKR", "NAM", "ZAF", "ATA", "SGS", "SSD", "NRU", "NPL", "NIC", "NER", "NGA", "NIU", "NOR", "NFK", "PLW", "PCN", "PRT", "JPN", "SWE", "CHE", "SLV", "WSM", "SRB", "SLE", "SEN", "CYP", "SYC", "SAU", "BLM", "CXR", "STP", "SHN", "KNA", "LCA", "SMR", "SPM", "VCT", "LKA", "SVK", "SVN", "SJM", "SWZ", "SDN", "SUR", "SLB", "SOM", "TJK", "THA", "TZA", "TON", "TCA", "TTO", "TUN", "TUV", "TUR", "TKM", "TKL", "WLF", "VUT", "GTM", "VEN", "BRN", "UGA", "UKR", "URY", "UZB", "ESP", "ESH", "GRC", "HKG", "SGP", "NCL", "NZL", "HUN", "SYR", "JAM", "ARM", "YEM", "IRQ", "IRN", "ISR", "ITA", "IND", "IDN", "GBR", "VGB", "IOT", "JOR", "VNM", "ZMB", "JEY", "TCD", "GIB", "CHL", "CAF", "TWN"])
        return countrys

    def data_time(self):
        """数据生成时间"""
        datatime = time.strftime("%Y%m%d%H%M%S", time.localtime())
        return datatime

    def random_num(self, num):
        """ 接收int类型参数num，根据参数随机生成数字,返回字符串,不以0开头"""
        res_list = []
        while len(res_list) < num:
            elem = random.randint(0, 9)
            if res_list or elem:
                res_list.append(str(elem))

        return "".join(res_list)

    def random_num_head_0(self, num):
        """ 接收int类型参数num，根据参数随机生成数字,返回字符串,可以以0开头"""
        res_list = []
        while len(res_list) < num:
            elem = random.randint(0, 9)
            res_list.append(str(elem))

        return "".join(res_list)


    def random_word_num_or_str(self, num):
        """
        随机生成指定位数的字母、数字组合，字母不区分大小写，
        返回字符串
        """

        if num < 1:
            raise ValueError("{} must be bigger than 0".format(num))
        words = 'abcdefghigklmnopqrstuvwxyz01123456789'
        temp = []
        while len(temp) < num:
            temp.append(random.choice(list(words)))
        return "".join(temp)


    # 电话号码数据
    def make_tel_num(self, tp=11):
        """
        随机生成手机号码
        11:家庭电话
        12:工作电话
        21:固定电话
        22:移动电话
        23:传真
        :return: 返回字符串类型
        """
        if tp == '21' or tp == '23':
            phone = self.random_num(9)
        else:
            one_two = random.choice(["13", "14", "15", "16", "17", "18", "19"])
            three_nine = []
            for num in range(9):
                elem = random.randint(0, 9)
                three_nine.append(str(elem))
            phone = one_two + "".join(three_nine)
        return phone

    # 邮箱数据
    def make_email_data(self):
        extend = random.choice(["163.com", "126.com", "gmail.com", "qq.com", "sina.com", "outlook.com"])
        name_1 = self.random_str(6)
        name_2 = self.random_num(6)
        return name_1 + "_" + name_2 + "@" + extend


    def make_address_type(self):
        """
        地址类型
        :return:
        """
        return random.choice([
            '11',  # -家庭地址
            '12',  # -工作地址
            '13',  # -证件地址
            '21',  # -注册地址
            '22',  # -经营地址
            '99'  # -其它地址
        ])


    def make_address(self, code=None):
        """
        # 地址数据
        :param code: 省市区代码
        :return: 详细地址
        """
        if not code:
            code = self.random_city()
        three_level_addr = pool.get_data(code)
        if '-' in three_level_addr:
            three_level_addr.replace('-', '')
        street_address = random.choice([
            "解放路", "千佛山", "趵突泉", "泉城路", "大明湖", "东关", "文东", "建新", "甸柳", "燕山", "姚家", "龙洞", "智远", "舜华路", "大观园", "杆石桥",
            "四里村",
            "魏家庄", "二七", "七里山", "六里山", "舜玉路", "泺源", "王官庄", "舜耕", "白马山", "七贤", "十六里河", "兴隆", "党家", "陡沟", "振兴街", "中大槐树",
            "道德街", "西市场", "五里沟", "营市街", "青年公园", "南辛庄", "段店北路", "张庄路", "匡山", "美里湖", "吴家堡", "腊山", "兴福", "玉清湖", "无影山",
            "天桥东街",
            "北村", "南村", "堤口路", "北坦", "制锦市", "宝华", "官扎营", "纬北路", "药山", "北园", "泺口", "桑梓店", "大桥", "山大路", "洪家楼", "东风", "全福",
            "孙村", "巨野河", "华山", "荷花路", "王舍人", "鲍山", "郭店", "唐冶", "港沟", "遥墙", "临港", "仲宫", "柳埠", "董家", "彩石", "文昌", "崮云湖",
            "平安",
            "五峰山", "归德", "万德", "张夏", "明水", "双山", "圣井", "埠村", "枣园", "龙山", "普集", "官庄", "相公庄", "绣惠", "文祖", "曹范", "白云湖",
            "高官寨",
            "宁家埠", "济阳", "济北", "回河", "孙耿", "崔寨", "太平", "榆山", "锦水"
        ])
        areas_name = random.choice([
            "万豪国际公寓", "晓月苑", "永定路商住中心", "橙色年代", "嘉慧苑", "致雅居", "彩虹城", "松园小区", "燕归园", "北京青年城", "金宝纯别墅", "翌景嘉园", "涧桥·泊屋馆",
            "京东丽景", "旭风苑公寓", "朝阳无限", "庄胜二期", "潇雅居", "GOGO新世代", "飞腾家园", "英嘉公寓", "高第", "金榜园", "迎曦园", "风格与林",
            "太阳国际公馆(瑞景嘉园)",
            "永合馨苑", "澳洲新星", "丰润世家", "洋桥花园", "长安新城", "金隅丽港城", "兴涛社区", "糖人街", "时代芳群", "运河园", "浉城百郦", "测试项目", "新洲商务大厦",
            "加来小镇",
            "新新公寓", "颍泽洲", "城市印象", "上河美墅", "同泰苑", "和枫雅居", "建兴家园", "昊腾花园", "高苑·花样年华", "金码大厦", "天辉公寓", "NOLITA那里", "政馨家园",
            "文林商苑", "蝶翠华庭", "晋元庄小区", "幸福源", "当代城市家园", "非常生活", "祥瑞苑", "雪梨澳乡", "清欣园", "晟丰阁", "倚林佳园", "华龙小区", "秀安园",
            "新华联锦园",
            "乐澜宝邸", "棉花城", "CLASS", "金宸公寓", "燕景佳园", "珠江帝景", "龙山新新小镇", "万景公寓", "飘HOME", "蓝堡", "新纪元公寓", "中信红树湾", "海德堡花园",
            "天缘公寓", "长城盛世", "鲁艺上河村", "瑞馨公寓", "鼎诚国际MM", "德胜世嘉", "榆园新居", "远洋天地", "星河城", "黎明新座", "世纪城", "大观园中华商住区",
            "中国第一商城",
            "后现代城", "中海凯旋", "新都丽苑", "陶然北岸", "观河锦苑", "星光公寓", "观筑", "绿城星洲花园", "御鹿家园", "都市心海岸", "山水汇豪", "漪内轩", "颐园(碧水云天)",
            "新荣家园", "双桥温泉北里住宅", "恬心家园", "正邦嘉园", "依翠园", "万科西山庭院", "新御景", "天行建商务大厦", "浉城百丽", "华腾园", "同仁园", "格林小镇",
            "东华经典(东华金座)", "俊景苑", "朗琴园", "快乐洋城", "新中环公寓", "非常宿舍", "清城名苑", "兴都苑(水榭楼台)", "雍景台", "风林绿洲(奕翠庭)", "团结公寓"
        ])
        building_name = str(random.randint(1, 50))
        unit_num = str(random.randint(1, 9))
        floor_num = str(random.randint(1, 30))
        room_num = str(random.randint(1, 4))
        return three_level_addr + street_address + "街道" + areas_name + building_name + "楼" + unit_num + "单元" + floor_num + "层" + room_num + "号"


    def random_city(self):
        """# 随机市"""
        city_code = ["130100", "130200", "130300", "130400", "130500", "130600", "130700", "130800", "130900", "131000", "131100", "140100", "140200", "140300", "140400", "140500", "140600", "140700", "140800", "140900", "141000", "141100", "150100", "150200", "150300", "150400", "150500", "150600", "150700", "150800", "150900", "152200", "152500", "152900", "210100", "210200", "210300", "210400", "210500", "210600", "210700", "210800", "210900", "211000", "211100", "211200", "211300", "211400", "220100", "220200", "220300", "220400", "220500", "220600", "220700", "220800", "222400", "230100", "230200", "230300", "230400", "230500", "230600", "230700", "230800", "230900", "231000", "231100", "231200", "232700", "320100", "320200", "320300", "320400", "320500", "320600", "320700", "320800", "320900", "321000", "321100", "321200", "321300", "330100", "330200", "330300", "330400", "330500", "330600", "330700", "330800", "330900", "331000", "331100", "340100", "340200", "340300", "340400", "340500", "340600", "340700", "340800", "341000", "341100", "341200", "341300", "341400", "341500", "341600", "341700", "341800", "350100", "350200", "350300", "350400", "350500", "350600", "350700", "350800", "350900", "360100", "360200", "360300", "360400", "360500", "360600", "360700", "360800", "360900", "361000", "361100", "370100", "370200", "370300", "370400", "370500", "370600", "370700", "370800", "370900", "371000", "371100", "371200", "371300", "371400", "371500", "371600", "371700", "410100", "410200", "410300", "410400", "410500", "410600", "410700", "410800", "410900", "411000", "411100", "411200", "411300", "411400", "411500", "411600", "411700", "420100", "420200", "420300", "420500", "420600", "420700", "420800", "420900", "421000", "421100", "421200", "421300", "422800", "429000", "430100", "430200", "430300", "430400", "430500", "430600", "430700", "430800", "430900", "431000", "431100", "431200", "431300", "433100", "440100", "440200", "440300", "440400", "440500", "440600", "440700", "440800", "440900", "441200", "441300", "441400", "441500", "441600", "441700", "441800", "441900", "442000", "445100", "445200", "445300", "450100", "450200", "450300", "450400", "450500", "450600", "450700", "450800", "450900", "451000", "451100", "451200", "451300", "451400", "460100", "460200", "469000", "500300", "510100", "510300", "510400", "510500", "510600", "510700", "510800", "510900", "511000", "511100", "511300", "511400", "511500", "511600", "511700", "511800", "511900", "512000", "513200", "513300", "513400", "520100", "520200", "520300", "520400", "522200", "522300", "522400", "522600", "522700", "530100", "530300", "530400", "530500", "530600", "530700", "530800", "530900", "532300", "532500", "532600", "532800", "532900", "533100", "533300", "533400", "540100", "542100", "542200", "542300", "542400", "542500", "542600", "610100", "610200", "610300", "610400", "610500", "610600", "610700", "610800", "610900", "611000", "620100", "620200", "620300", "620400", "620500", "620600", "620700", "620800", "620900", "621000", "621100", "621200", "622900", "623000", "630100", "632100", "632200", "632300", "632500", "632600", "632700", "632800", "640100", "640200", "640300", "640400", "640500", "650100", "650200", "652100", "652200", "652300", "652700", "652800", "652900", "653000", "653100", "653200", "654000", "654200", "654300", "659000", "442000", "441900", "533100"]
        return random.choice(city_code)

    def chiose_provance(self, city):
        pro = ["350000", "710000", "370000", "460000", "610000", "540000", "620000", "210000", "450000", "420000", "120000", "150000", "110000", "440000", "340000", "320000", "230000", "330000", "810000", "530000", "140000", "640000", "650000", "510000", "520000", "430000", "310000", "630000", "820000", "360000", "130000", "220000", "410000", "500000", "999999"]
        pro_code = city[:2] + "0000"
        if pro_code in pro:
            return pro_code
        else:
            return "999999"

    def cust_tyep(self):
        """客户类别"""
        return random.choice([
            '1',  # FI
            '2'  # CGI
        ])

    def org_type(self):
        """组织机构类别"""
        code = random.choice([
            "1",  # corporation
            "2",  # credit union
            "3",  # government
            "4",  # limited liability company
            "5",  # not for profit
            "6",  # partnership
            "7",  # private label liability company
            "8",  # public authorities
            "9",  # publist list company
            "10",  # sole proprietorships
            "11"  # other
        ])
        return code


    def random_code(self):
        """多个共用，具体含义见字段注释"""
        return random.choice(['1','2'])

    def random_chenghu(self):
        """称呼"""
        return random.choice(['Mr', 'Ms'])

    def cust_status(self):
        """
        随机生成客户状态，n正常，c关闭，n:c=9:1
        :return:
        """
        status = random.choice(["n"  if i != 9 else "c" for i in range(10)])
        return status

    def cust_status_2(self):
        return random.choice([
            'C',  # -注销
            'N',  # -正常
            'I',  # -待激活
            'U',  # -闲置
            'B'  # -冻结
        ])



    # 客户真实有效性数据
    def make_reals_data(self):
        """
        正常为空，不正常：
        1:留存的联系地址与注册地址不一致
        2:留存联系地址不存在或者虚构
        3:留存的电话号码属于无效、空号、已停机或无法接通
        4:证件非本人、证件伪造、变造证件
        5:拒绝配合尽职调查工作
        正常数据与不正常数据比例为1:10
        :return:
        """
        return random.choice(['' if num >= 1 else str(random.randint(1, 5)) for num in range(10)])

    # 股权复杂度数据
    def make_complex_data(self):
        complex = random.choice([
            "1",  # 股权 3层以下
            "2",  # 股权 3层及以上，有商业目的
            "3"  # 股权 3层以上；或3个及以上注册地；涉及信托/不受监管的投资基金/代名人股东等；及没有明显商业目的
        ])
        return complex

    # 非自然人股权可辨识度数据
    def make_clear_data(self):
        clear = random.choice([
            "1",  # 全民集体所有制企业等结构清晰的企业
            "2",  # 公司制企业等结构相对清晰的企业
            "3",  # 公司制外资企业等结构较难识辨的企业
            "4",  # 个人独资企业、家族企业、合伙等难以尽调的企业
            "5"  # 其他风险较高股权或控制权结构（信托、代名股东等
        ])
        return clear

    def make_rule_type(self):
        """预警类型"""
        return random.choice([
            '00',  # 大额
            '01'  # 可疑
        ])

    def make_warn_kd(self):
        """预警方式"""
        return random.choice([
            '0',  # 人工手动
            '1'  # 系统自动
        ])

    def make_ctif_tp(self):
        """可疑主体类别"""
        return random.choice([
            '1',  # 持卡人
            '2'  # 商户
        ])

    def make_tran_kd(self):
        """交易种类, 差错交易占1%，
        '00',  # 差错交易
        '10'  # 普通交易
            """
        return random.choice(['10' if n%60 == 0 else '00' for n in range(100)])


    def make_STCT_data(self):
        """
        主体使用的银行卡类型
        :return:
        """
        return random.choice([
            "01",  # 境内借记卡；
            "02",  # 境内信用卡；
            "03",  # 境内预付费卡；
            "09",  # 其他境内卡（若选择此项，报告机构应对其境内卡类型做进一步说明）；
            "11",  # 境外借记卡；
            "12",  # 境外信用卡；
            "13",  # 境外预付费卡；
            "19",  # 其他境外卡（若选择此项，报告机构应对其境外卡类型做进一步说明）；
            "99"  # 其他（若选择此项，报告机构应对其银行发行卡类型做进一步说明）
        ])

    def make_tstp_data(self):
        """
        交易方式
        :return:
        """
        return random.choice([
            "11",  # ATM现金交易业务；
            "12",  # 银行柜面现金交易；
            "19",  # 其他方式现金交易；（若选择此项，报告机构应对其现金交易方式做进一步说明）
            "21",  # ATM转账业务；
            "22",  # 银行柜面转账业务；
            "23",  # 网银转账业务；
            "29",  # 其他方式转账业务；（若选择此项，报告机构应对其转账方式做进一步说明）
            "30",  # P0S消费；
            "40",  # 网络收单交易；
            "99"  # 其他方式（若选择此项，报告机构应对其交易方式做进一步说明）
        ])
    def make_bskd_data(self):
        """
        业务种类（受益类型）
        :return:
        """
        return random.choice([
            "01",  # 单一+自益；
            "02",  # 单一+他益；
            "03",  # 集合+自益；
            "04",  # 集合+他益；
            "99"  # 其他。
        ])

    def make_trtp_data(self):
        """
        信托类型
        :return:
        """
        return random.choice([
            "01",  # 资金信托；
            "02",  # 动产信托；
            "03",  # 不动产信托；
            "04",  # 有价证券信托；
            "99"  # 其他
        ])

    def make_CTTP_data(self):
        """
        客户类型
        委托人类型
        运用方类型
        :return:
        """
        return random.choice([
            '01', # 法人
            '03', # 个体工商户
            '04' # 其他组织
        ])
    # 开户行数据
    def make_cabm_data(self):
        """
        根据身份证所属省市，随机生成开户行名称
        :param code: 身份证号前6位字符串
        :return: 开户行名称
        """
        street_address = random.choice([
            "解放路", "千佛山", "趵突泉", "泉城路", "大明湖", "东关", "文东", "建新", "甸柳", "燕山", "姚家", "龙洞", "智远", "舜华路", "大观园", "杆石桥",
            "四里村",
            "魏家庄", "二七", "七里山", "六里山", "舜玉路", "泺源", "王官庄", "舜耕", "白马山", "七贤", "十六里河", "兴隆", "党家", "陡沟", "振兴街", "中大槐树",
            "道德街", "西市场", "五里沟", "营市街", "青年公园", "南辛庄", "段店北路", "张庄路", "匡山", "美里湖", "吴家堡", "腊山", "兴福", "玉清湖", "无影山",
            "天桥东街",
            "北村", "南村", "堤口路", "北坦", "制锦市", "宝华", "官扎营", "纬北路", "药山", "北园", "泺口", "桑梓店", "大桥", "山大路", "洪家楼", "东风", "全福",
            "孙村", "巨野河", "华山", "荷花路", "王舍人", "鲍山", "郭店", "唐冶", "港沟", "遥墙", "临港", "仲宫", "柳埠", "董家", "彩石", "文昌", "崮云湖",
            "平安",
            "五峰山", "归德", "万德", "张夏", "明水", "双山", "圣井", "埠村", "枣园", "龙山", "普集", "官庄", "相公庄", "绣惠", "文祖", "曹范", "白云湖",
            "高官寨",
            "宁家埠", "济阳", "济北", "回河", "孙耿", "崔寨", "太平", "榆山", "锦水"
        ])
        bank_name = random.choice(["工商银行", "建设银行", "邮政储蓄银行", "招商银行", "光大银行", "农业银行", "中国银行", "浦发银行", "浙商银行"])
        return bank_name + street_address + "支行"

    def make_bank_account_type(self):
        """
        银行账号类型
        :return:
        """
        res = random.choice([
            "11",  # ：借记卡
            "12",  # ：贷记卡
            "13",  # ：准贷记卡
            "14",  # ：存折结算账户
            "15",  # ：支付账户
            "19",  # ：其他个人账户
            "21",  # ：银行对公基本户
            "22",  # ：银行对公一般户
            "23",  # ：对公支付账户
            "29"  # ：其他对公账户
        ])
        return res


    def make_time(self):
        """生成随机时间，时分秒 HH:mm:ss"""
        hour = random.randint(0,23)
        minite = random.randint(0,59)
        second = random.randint(0,59)
        if hour == 0:
            hour = '0'
        elif hour <10:
            hour = '0' + str(hour)

        if minite == 0:
            minite = '00'
        elif minite < 10:
            minite = '0' + str(second)

        if second == 0:
            second = '00'
        elif second < 10:
            second = '0' + str(second)
        return "{}:{}:{}".format(hour, minite, second)

    def make_tsdr_data(self):
        '''
        相同码值共用
        资金收付标识tsdr,境内外标识CBIF，卡类型card_media，
        '''
        return random.choice([
            '01',  # :收
            '02'  # : 付
        ])

    def process_time(self, tt):
        """
        处理自增日期函数，传入日期，根据月份，限制天数
        :param tt:
        :return: str  YYYYmmdd
        """
        t = str(tt)
        year = int(t[:4])
        month = int(t[4:6])
        day = int(t[6:])
        if month in [1, 3, 5, 7, 8, 10, 12]:
            if day > 31:
                day = day % 31
                month += 1

        elif month in [4, 6, 9, 11]:
            if day > 30:
                day = day % 30
                month += 1
        else:
            if year % 4 == 0:
                if day > 29:
                    day = day % 29
                    month += 1
            else:
                if day > 28:
                    day = day % 28
                    month += 1
        if month < 10:
            month = '0' + str(month)
        if day < 10:
            day = '0' + str(day)

        pt = str(year) + str(month) + str(day)
        return pt

    def make_tctp_data(self):
        """交易币种"""
        return random.choice([
            "AFA",  # 阿富汗尼
            "ALL",  # 列克
            "DZD",  # 阿尔及利亚第纳尔
            "ADP",  # 安道尔比塞塔
            "AZM",  # 阿塞拜疆马纳特
            "ARS",  # 阿根廷比索
            "AUD",  # 澳大利亚元
            "ATS",  # 先令
            "BSD",  # 巴哈马元
            "BHD",  # 巴林第纳尔
            "BDT",  # 塔卡
            "AMD",  # 亚美尼亚达姆
            "BBD",  # 巴巴多斯元
            "BEF",  # 比利时法郎
            "BMD",  # 百慕大元
            "BTN",  # 努尔特鲁姆
            "BOB",  # 玻利瓦诺
            "BWP",  # 普拉
            "BZD",  # 伯利兹元
            "SBD",  # 所罗门群岛元
            "BND",  # 文莱元
            "BGL",  # 列弗
            "MMK",  # 缅元
            "BIF",  # 布隆迪法郎
            "KHR",  # 瑞尔
            "CAD",  # 加元
            "CVE",  # 佛得角埃斯库多
            "KYD",  # 开曼群岛元
            "LKR",  # 斯里兰卡卢比
            "CLP",  # 智利比索
            "CNY",  # 人民币元
            "COP",  # 哥伦比亚比索
            "KMF",  # 科摩罗法郎
            "CRC",  # 哥斯达黎加科郎
            "HRK",  # 克罗地亚库纳
            "CUP",  # 古巴比索
            "CYP",  # 塞浦路斯镑
            "CZK",  # 捷克克朗
            "DKK",  # 丹麦克朗
            "DOP",  # 多米尼加比索
            "SVC",  # 萨尔瓦多科郎
            "ETB",  # 埃塞俄比亚比尔
            "ERN",  # 纳克法
            "EEK",  # 克罗姆
            "FKP",  # 福克兰群岛镑
            "FJD",  # 斐济元
            "FIM",  # 马克
            "FRF",  # 法国法郎
            "DJF",  # 吉布提法郎
            "GMD",  # 达拉西
            "DEM",  # 德国马克
            "GHC",  # 塞地
            "GIP",  # 直布罗陀镑
            "GRD",  # 德拉克马
            "GTQ",  # 格查尔
            "GNF",  # 几内亚法郎
            "GYD",  # 圭亚那元
            "HTG",  # 古德
            "HNL",  # 伦皮拉
            "HKD",  # 香港元
            "HUF",  # 福林
            "ISK",  # 冰岛克朗
            "INR",  # 印度卢比
            "IDR",  # 卢比
            "IRR",  # 伊朗里亚尔
            "IQD",  # 伊拉克第纳尔
            "IEP",  # 爱尔兰镑
            "ILS",  # 新谢客尔
            "ITL",  # 意大利里拉
            "JMD",  # 牙买加元
            "JPY",  # 日元
            "KZT",  # 坚戈
            "JOD",  # 约旦第纳尔
            "KES",  # 肯尼亚先令
            "KPW",  # 北朝鲜圆
            "KRW",  # 圆
            "KWD",  # 科威特第纳尔
            "KGS",  # 索姆
            "LAK",  # 基普
            "LBP",  # 黎巴嫩镑
            "LSL",  # 罗提
            "LVL",  # 拉脱维亚拉特
            "LRD",  # 利比里亚元
            "LYD",  # 利比亚第纳尔
            "LTL",  # 立陶宛
            "LUF",  # 卢森堡法郎
            "MOP",  # 澳门元
            "MGF",  # 马尔加什法郎
            "MWK",  # 克瓦查
            "MYR",  # 马来西亚林吉特
            "MVR",  # 卢菲亚
            "MTL",  # 马尔他里拉
            "MRO",  # 乌吉亚
            "MUR",  # 毛里求斯卢比
            "MXN",  # 墨西哥比索
            "MNT",  # 图格里克
            "MDL",  # 摩尔瓦多列伊
            "MAD",  # 摩洛哥迪拉姆
            "MZM",  # 麦梯卡尔
            "OMR",  # 阿曼里亚尔
            "NAD",  # 纳米比亚元
            "NPR",  # 尼泊尔卢比
            "NLG",  # 荷兰盾
            "ANG",  # 荷属安的列斯盾
            "AWG",  # 阿鲁巴盾
            "VUV",  # 瓦图
            "NZD",  # 新西兰元
            "NIO",  # 金科多巴
            "NGN",  # 奈拉
            "NOK",  # 挪威克朗
            "PKR",  # 巴基斯坦卢比
            "PAB",  # 巴波亚
            "PGK",  # 基那
            "PYG",  # 瓜拉尼
            "PEN",  # 索尔
            "PHP",  # 非律宾比索
            "PTE",  # 葡萄牙埃斯库多
            "GWP",  # 几内亚比绍比索
            "TPE",  # 东帝汶埃斯库多
            "QAR",  # 卡塔尔里亚尔
            "ROL",  # 列伊
            "RUB",  # 俄罗斯卢布
            "RWF",  # 卢旺达法郎
            "SHP",  # 圣赫勒拿磅
            "STD",  # 多布拉
            "SAR",  # 沙特里亚尔
            "SCR",  # 塞舌尔卢比
            "SLL",  # 利昂
            "SGD",  # 新加坡元
            "SKK",  # 斯洛伐克克朗
            "VND",  # 盾
            "SIT",  # 托拉尔
            "SOS",  # 索马里先令
            "ZAR",  # 兰特
            "ZWD",  # 津巴布韦元
            "ESP",  # 西班牙比塞塔
            "SDD",  # 苏丹第纳尔
            "SRG",  # 苏里南盾
            "SZL",  # 里兰吉尼
            "SEK",  # 瑞典克朗
            "CHF",  # 瑞士法郎
            "SYP",  # 叙利亚镑
            "THB",  # 铢
            "TOP",  # 邦加
            "TTD",  # 特立尼达和多巴哥元
            "AED",  # UAE迪拉姆
            "TND",  # 突尼斯第纳尔
            "TRL",  # 土耳其里拉
            "TMM",  # 马纳特
            "UGX",  # 乌干达先令
            "MKD",  # 第纳尔
            "RUR",  # 俄罗斯卢布
            "EGP",  # 埃及镑
            "GBP",  # 英镑
            "TZS",  # 坦桑尼亚先令
            "USD",  # 美元
            "UYU",  # 乌拉圭比索
            "UZS",  # 乌兹别克斯坦苏姆
            "WST",  # 塔拉
            "YER",  # 也门里亚尔
            "YUM",  # 南斯拉夫第纳尔
            "ZMK",  # 克瓦查
            "TWD",  # 新台湾元
            "XAF",  # CFA法郎BEAC
            "XCD",  # 东加勒比元
            "XOF",  # CFA法郎BCEAO
            "XPF",  # CFP法郎
            "XBA",  # 欧洲货币合成单位
            "XBB",  # 欧洲货币单位(E.M.U.-6)
            "XBC",  # 欧洲账户9单位
            "XBD",  # 欧洲账户17单位
            "XAU",  # 黄金
            "XDR",  # 特别提款权
            "XAG",  # 银
            "XPT",  # 铂白金
            "XTS",  # 测试特别保留
            "XPD",  # 钯
            "TJS",  # 索莫尼
            "AOA",  # 宽扎
            "BYR",  # 白俄罗斯卢布
            "BGN",  # 保加利亚列弗
            "CDF",  # 刚果法郎
            "BAM",  # 可自由兑换标记
            "EUR",  # 欧元
            "MXV",  # 墨西哥发展单位
            "UAH",  # 格里夫纳
            "GEL",  # 拉里
            "BOV",  # Mvdol(玻利维亚)
            "PLN",  # 兹罗提
            "BRL",  # 巴西瑞尔
            "CLF",  # 发展单位
            "USN",  # (次日)
            "USS",  # (同日)
            "XXX",  # 未包括的交易货币
            "XFU",  # UIC法郎
            "XFO"  # 黄金法郎
        ])

    def make_pmtd_data(self):
        """
        合同交付方式
        :return:
        """
        return random.choice([
            '01',  # 资金结算
            '99'  # 其他
        ])

    def make_bstp_data(self):
        """业务类型"""
        return random.choice([
            "01",  # 小微金融
            "02",  # 产业金融
            "03",  # 证券信托
            "04",  # 金融市场
            "05",  # 资产管理
            "06",  # 投资发展
            "07",  # 家族财富
            "09"  # 其他
        ])
    def make_tcat_data(self):
        """交易金额"""
        temp = fake.pyfloat(positive=True)
        return round(temp, 3)

    def make_ticd_data(self):
        """
        交易流水的唯一识别码，时间戳加地区代码加5位随机数字
        :return:
        """
        timestmp = time.time()
        ticd = self.random_num(6) + str(timestmp).replace(".", "") + self.random_num(5)
        return ticd

    def make_busi_type(self):
        return random.choice([
            "01",  # 万事达卡
            "02",  # 万事顺卡
            "03"  # 顺利卡
        ])

    def make_trans_type(self):
        return random.choice([
            "00",  # 初始
            "01",  # 成功
            "02",  # 失败
            "03",  # 超时
            "04",  # 缺陷成功
            "05"  # 未知失败
        ])

    def make_tran_advice_st(self):
        return random.choice([
            "00",  # 初始
            "01",  # 预授权完成撤销
            "11",  # 拒绝通知
            "13",  # 已通知
            "15",  # 预授权完成
            "81",  # 部分撤销
            "83",  # 已撤销
            "85",  # 部分冲正
            "89"  # 已冲正
        ])

    def make_yes_no(self):
        """
        通用，返回1是，0否
        :return:
        """
        return random.choice(['1' if n %4 == 0 else '0' for n in range(10)])

    def make_CMGR_data(self):
        return random.choice([
            "逮往但",
            "易你别",
            "焦刚望",
            "诸葛界各",
            "盖光记",
            "水革关",
            "拓跋个东",
            "益说点",
            "冷直千",
            "皇甫阵花",
            "利高将",
            "贲办群",
            "郑里结",
            "益把车",
            "别把总",
            "浦切群",
            "詹把师",
            "禄给机",
            "邬同今",
            "籍它席"
        ])
    def make_hold_amt2(self):
        """
        关系人持股金额,保留2位小数
        :return:
        """
        # temp = fake.pyfloat(positive=True)
        temp = random.randint(100000,500000)
        temp = round(temp, 2)
        return temp
    def make_yes_no_unused(self):
        """
        通用，返回1是，0否
        :return:
        """
        temp = ['1' if n %4 == 0 else '0' for n in range(10)]
        temp.extend(['2', '2'])
        return random.choice(temp)

    def make_comm_re_1_2(self):
        """
        委托/运用合同
        运用方类别
        :return:
        """
        return random.choice([
            '1','2'
        ])

    def make_mingdan_type(self):
        """名单种类"""
        return random.choices([
            '1',  # 政要名单
            '2',  #  联合国制裁名单
            '3'  # 其他
        ])

    def make_TRCD_data(self):
        """交易发生地"""
        local = "CHN{}".format(random.choice([130100, 130200, 130300, 130400, 130500, 130600, 130700, 130800, 130900, 131000, 131100, 140100, 140200, 140300, 140400, 140500, 140600, 140700, 140800, 140900, 141000, 141100, 150100, 150200, 150300, 150400, 150500, 150600]))
        return local

    def make_channel_type(self):
        """交易渠道"""
        return random.choice([
            "01",  # POS
            "02",  # ATM
            "03"  # Teller
        ])

    def make_digsit(self, code):
        """
        假设token_pan是正常卡号，取前六位后四位，中间用6位*代替
        :return:
        """
        code = str(code)
        return code[:6] + '*'*6 + code[-4:]


    def make_crdhldr_acc_tp_from(self):
        """
        持卡人出方账户类型 ,缺码表，随机2位数代替
        :return:
        """
        temp = []
        for i in range(2):
            temp.append(str(random.randint(0,9)))

        return ''.join(temp)

    def make_crdhldr_acc_tp_to(self):
        """
        持卡人入方账户类型,缺码表，随机2位数代替
        :return:
        """
        temp = []
        for i in range(2):
            temp.append(str(random.randint(0,9)))

        return ''.join(temp)

    def make_trade_time19(self, date=None):
        """19位时间 YYYY-MM-DD HH:mm:ss"""
        if not date:
            date = '{}-{}-{}'.format(self.year, self.month, self.day)
            temp = "{} {}".format(date, self.make_time())
        else:
            temp = "{} {}".format(date, self.make_time())
        return temp

    def turn_date10(self, date):
        """
        传入8位日期，返回10位日期
        :param date:
        :return:
        """
        temp = "{}-{}-{}".format(date[:4], date[4:6], date[6:])
        return temp

    # 有效期数据
    # 有效期数据
    def make_enable_date(self,sign='8'):
        """
        有效期,日期范围，本年本月本日起至前推20年之间，格式 YYYY-MM-DD
        :return:
        """
        year_now = int(self.year)
        num = random.randint(-2, 20)
        year = year_now + num
        month_now = int(self.month)
        if year == year_now:
            month = random.randint(1, month_now)
        else:
            month = random.randint(1, 12)
        if month < 10:
            month = "0" + str(month)
        else:
            month = str(month)
        day_now = int(self.day)
        if month == "02":
            if year == year_now and int(month) == month_now:
                day = str(random.randint(1, day_now))
            else:
                day = str(random.randint(1, 28))
        else:
            if year == year_now and int(month) == month_now:
                day = str(random.randint(1, day_now))
            else:
                day = str(random.randint(1, 30))
        if eval(day) < 10:
            day = "0" + day
        if sign == '8':
            return "".join([str(year), month, day])
        else:
            return "-".join([str(year), month, day])

    def make_iss_mti_cd(self):
        """
        随机，缺码表
        :return:
        """
        return random.choice([
            '0',
            '1'
        ])

    def make_iss_pcode(self):
        """
        随机，缺码表
        :return:
        """
        return random.choice([
            '0',
            '1'
        ])

    def make_tran_init(self):
        """交易发起方"""
        return random.choice([
            '0',  # 联机平台
            '1',  # 成员行发起
            '2'  # 手工平台发起
        ])

    def make_tran_res(self):
        """收单应答标识, 公用函数，"""
        return random.choice([
            '0',  # 联机应答
            '1',  # 成员行应答
        ])

    def make_card_type(self):
        """卡类型"""
        return random.choice([
            '01',  # 借记卡
            '02',  # 贷记卡
        ])

    def make_inter_tran_type(self):
        """联机系统内部交易类型"""
        return random.choice([
            "11000001",  # 预授权
            "21000002",  # 消费
            "21000003",  # 取现
            "21000004",  # 转账
            "21000005",  # 存款
            "21000006",  # 退货（联机）
            "21000007",  # 代收
            "21000008",  # 代付
            "21010010",  # 转账转出
            "21010011",  # 转账转入
            "31000001",  # 账户验证
            "31000002",  # 余额查询
            "22000001"  # 预授权完成
        ])
    def make_hold_amt(self):
        """
        关系人持股金额,保留2位小数
        :return:
        """
        temp = fake.pyfloat(positive=True)
        temp = round(temp, 2)
        return temp

    def make_chnl_data(self):
        """
        建立渠道
        :return:
        """
        return random.choice([
            '1',  # 面对面渠道-自主营销
            '2',  # 代理推介-金融机构
            '3',  # 代理推介-非金融机构
            '9'  # 其他渠道
        ])


    def make_mbrc_ori_data(self):
        """管理结构原值"""
        return random.choice([
            "352",
            "924",
            "670",
            "169",
            "941",
            "131",
            "952",
            "495",
            "885",
            "822"
        ])

    def make_BEON_data(self):
        """
        受益所有人标识
        :return:
        """
        return random.choice([
            "1",  # 有受益所有人
            "2"  # 豁免
        ])

    def make_EMRS_data(self):
        """豁免原因"""
        return random.choice([
            "01",  # 党政机关
            "02"  # 政府间国际组织
        ])

    def make_MBRC_MULTI_data(self):
        return random.choice([
            "01",
            "02",
            "02,07",
            "03",
            "04",
            "04,08",
            "05",
            "06,07",
            "07",
            "08"
        ])

    def make_TITP_data(self):
        '''

        :return:
        '''
        return random.choice([
            "1",  # 委托合同
            "2",  # 受益权转让合同
            "3",  # 运用合同
            "4"  # 债券转让合同
        ])

    def make_IVST_data(self):
        """资金投向"""
        return random.choice([
            "1",  # 基础产业
            "2",  # 房地产
            "3",  # 证券
            "4",  # 金融机构
            "5",  # 工商企业
            "6",  # 教育
            "7",  # 交通
            "8",  # 实业
            "ZZ"  # 其他
        ])

    def make_CBTS_data(self):
        """出资财产来源"""
        return random.choice([
            "1",  # 公司自主营销客户-自然人
            "2",  # 公司自主营销客户-外贸信托自有资金
            "3",  # 公司自主营销客户-外贸信托信托项目
            "4",  # 银行资金-表内资金
            "5",  # 银行资金-理财资金
            "6",  # 证券公司或下属资管子公司-表内资金
            "7",  # 证券公司或下属资管子公司-理财资金
            "8",  # 基金公司或下属资管子公司-表内资金
            "9",  # 基金公司或下属资管子公司-理财资金
            "10",  # 保险公司-表内资金
            "11",  # 保险公司-理财资金
            "12",  # 其他信托公司-自有资金
            "13",  # 其他信托公司-信托项目
            "14",  # 其他金融机构-表内资金
            "15",  # 其他金融机构-理财资金
            "16",  # 非金融机构
            "17",  # 合格境外机构投资人（QFII）
            "18",  # 企业年金
            "19",  # 来自银行资金-表内资金
            "20",  # 来自银行资金-理财资金
            "21",  # 来自银行资金-银行代销机构
            "22",  # 来自银行资金-银行代销自然人
            "23",  # 来自证券公司或下属资管子公司-表内资金
            "24",  # 来自证券公司或下属资管子公司-理财资金
            "25",  # 来自证券公司或下属资管子公司-代理推荐自然人
            "26",  # 来自证券公司或下属资管子公司-代理推荐机构
            "27",  # 来自基金公司或下属资管子公司-表内资金
            "28",  # 来自基金公司或下属资管子公司-理财资金
            "29",  # 来自基金公司或下属资管子公司-代理推荐自然人
            "30",  # 来自基金公司或下属资管子公司-代理推荐机构
            "31",  # 来自保险公司-表内资金
            "32",  # 来自保险公司-理财资金
            "33",  # 来自保险公司-代理推荐自然人
            "34",  # 来自保险公司-代理推荐机构
            "35",  # 其他信托公司-自有资金
            "36",  # 其他信托公司-信托项目
            "37",  # 来自其他非信托金融机构-表内资金
            "38",  # 来自其他非信托金融机构-理财资金
            "39",  # 来自其他非信托金融机构-代理推荐自然人
            "40",  # 来自其他非信托金融机构-代理推荐机构
            "41",  # 来自非金融第三方机构-自然人
            "42",  # 来自非金融第三方机构-机构
            "43",  # 来自非金融第三方机构-企业年金
            "44",  # 来自非金融第三方机构-合格境外机构投资人（QFII）
            "45",  # 来自非金融第三方机构-其他
            "ZZ"  # 其他
        ])

    def make_TPRS_data(self, code):
        """
        出资财产来源说明
        :return: 中文描述
        """
        data = {
            "1": "公司自主营销客户-自然人",
            "2": "公司自主营销客户-外贸信托自有资金",
            "3": "公司自主营销客户-外贸信托信托项目",
            "4": "银行资金-表内资金",
            "5": "银行资金-理财资金",
            "6": "证券公司或下属资管子公司-表内资金",
            "7": "证券公司或下属资管子公司-理财资金",
            "8": "基金公司或下属资管子公司-表内资金",
            "9": "基金公司或下属资管子公司-理财资金",
            "10": "保险公司-表内资金",
            "11": "保险公司-理财资金",
            "12": "其他信托公司-自有资金",
            "13": "其他信托公司-信托项目",
            "14": "其他金融机构-表内资金",
            "15": "其他金融机构-理财资金",
            "16": "非金融机构",
            "17": "合格境外机构投资人（QFII）",
            "18": "企业年金",
            "19": "来自银行资金-表内资金",
            "20": "来自银行资金-理财资金",
            "21": "来自银行资金-银行代销机构",
            "22": "来自银行资金-银行代销自然人",
            "23": "来自证券公司或下属资管子公司-表内资金",
            "24": "来自证券公司或下属资管子公司-理财资金",
            "25": "来自证券公司或下属资管子公司-代理推荐自然人",
            "26": "来自证券公司或下属资管子公司-代理推荐机构",
            "27": "来自基金公司或下属资管子公司-表内资金",
            "28": "来自基金公司或下属资管子公司-理财资金",
            "29": "来自基金公司或下属资管子公司-代理推荐自然人",
            "30": "来自基金公司或下属资管子公司-代理推荐机构",
            "31": "来自保险公司-表内资金",
            "32": "来自保险公司-理财资金",
            "33": "来自保险公司-代理推荐自然人",
            "34": "来自保险公司-代理推荐机构",
            "35": "其他信托公司-自有资金",
            "36": "其他信托公司-信托项目",
            "37": "来自其他非信托金融机构-表内资金",
            "38": "来自其他非信托金融机构-理财资金",
            "39": "来自其他非信托金融机构-代理推荐自然人",
            "40": "来自其他非信托金融机构-代理推荐机构",
            "41": "来自非金融第三方机构-自然人",
            "42": "来自非金融第三方机构-机构",
            "43": "来自非金融第三方机构-企业年金",
            "44": "来自非金融第三方机构-合格境外机构投资人（QFII）",
            "45": "来自非金融第三方机构-其他",
            "ZZ": "其他",
        }
        return data.get(code)

    def make_SLMD_data(self):
        """
        销售方式
        :return:
        """
        return random.choice([
            "1",  # 直销
            "2",  # 银行推介
            "3",  # 证券公司或下属资管子公司推介
            "4",  # 其他渠道推介
            "5",  # 非金融第三方机构推介
            "6",  # 基金公司或下属资管子公司推介
            "7",  # 保险公司推介
            "8",  # 其他信托公司推介
            "9",  # 其他金融机构推介
            "10"  # 非渠道
        ])

    def make_SCHN_data(self,code):
        """
        销售途径
        :return:
        """
        if code == "1":
            return "直销"
        else:
            return "代销"

    def make_RLTP_data(self):
        """
        关系类型
        :return:
        """
        return random.choice([
            "1",  # 配偶
            "2",  # 父母
            "3",  # 子女
            "4",  # 其他血亲
            "5",  # 其他姻亲
            "6",  # 董事长
            "7",  # 总经理/主要负责人
            "8",  # 财务负责人
            "9",  # 监事长
            "10",  # 法定代表人
            "11",  # 实际控制人
            "12",  # 受益人
            "13",  # 监察人
            "14",  # 被授权人
            "ZZ"  # 其他
        ])

    def make_BATP_ORI_data(self):
        """
        所有的账号类型（原值）
        :return:
        """
        return random.choice([
            "10",  # 个人贷记卡账户
            "11",  # 个人借记卡账户
            "12",  # 企业账户
            "13",  # 溢激款账户
            "14"  # 商户
        ])

    def make_GRTM_data(self):
        """
        担保方式
        :return:
        """
        return random.choice([
            "1",  # 抵押
            "2",  # 质押
            "3",  # 保证
            "0"  # 无
        ])

    def make_MUPM_data(self):
        """
        管理运用处分方式
        :return:
        """
        return random.choice([
            "1",  # 出租
            "2",  # 出售
            "3",  # 资产证券化
            "4",  # 准资产证券化
            "5",  # 持有并管理
            "ZZ"  # 其他
        ])

    def make_TPFD_data(self):
        """
        资产流动方向
        :return:
        """
        return random.choice([
            "01",  # 收
            "02"  # 付
        ])

    def make_FIVF_data(self):
        """
        投融资形式
        :return:
        """
        return random.choice([
            "0",  # 贷款
            "1",  # 租赁
            "2",  # 投资附回购
            "3",  # 投资附回购选择权
            "4",  # 资产买入反售或回购承诺
            "5",  # 收益权投资附回购或回购选择权
            "6",  # 股权投资
            "7",  # 实物投资
            "8",  # 资产或收益权买断式投资
            "9",  # 组合
            "10"  # 其他
        ])

    def make_PJTP_data(self):
        """
        项目类型
        :return:
        """
        return random.choice([
            "0",  # 其他
            "1",  # 证券投资
            "2",  # 房地产
            "3",  # 矿产
            "4",  # 基础设施
            "5",  # 消费金融
            "6",  # MOM
            "7",  # 家族信托
            "8"  # 资产配置
        ])

    def make_MBRC_data(self):
        """
        合同管理部门
        :return:
        """
        return random.choice([
            121, 141, 162, 163, 164, 165, 166, 167, 168, 169, 170, 181, 241, 242, 261, 281, 282, 283, 284, 285, 286,
            287, 288, 289, 301, 302, 303, 304, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
            322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343,
            344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 381, 382, 383, 384,
            385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 401, 402, 403, 421, 422, 441, 461, 481, 482, 501, 502,
            521, 522, 541, 542, 543, 544, 545, 546, 561, 581, 601, 602, 621, 622, 623, 624, 625, 641, 647, 648, 661,
            662, 663, 681, 682, 683, 701, 702, 703, 704, 705, 721, 741, 761, 781, 782, 783, 784, 785, 801, 802, 803,
            804, 805, 821, 822, 841, 842, 843, 844, 845, 846, 861, 900
        ])